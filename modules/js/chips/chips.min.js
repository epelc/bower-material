/*!
 * Angular Material Design
 * https://github.com/angular/material
 * @license MIT
 * v0.9.0
 */
!function(){"use strict";function t(t){function e(e,n){return e.append(c),function(e,n,i,r){n.addClass("md-chip"),t(n),r&&angular.element(n[0].querySelector(".md-chip-content")).on("blur",function(){r.selectedChip=-1})}}return{restrict:"E",require:"^?mdChips",compile:e}}function e(t){function e(e,n,i,r){n.on("click",function(t){e.$apply(function(){r.removeChip(e.$$replacedScope.$index)})}),t(function(){n.attr({tabindex:-1,ariaHidden:!0}),n.find("button").attr("tabindex","-1")})}return{restrict:"A",require:"^mdChips",scope:!1,link:e}}function n(t,e){function n(e,n,i){var r=e.$parent.$mdChipsCtrl,s=r.parent.$new(!1,r.parent);s.$$replacedScope=e,s.$chip=e.$chip,s.$mdChipsCtrl=r,n.html(r.$scope.$eval(i.mdChipTransclude)),t(n.contents())(s)}return{restrict:"EA",terminal:!0,link:n,scope:!1}}function i(t,e,n,i,r){this.$timeout=r,this.$mdConstant=e,this.$scope=t,this.parent=t.$parent,this.$log=n,this.$element=i,this.ngModelCtrl=null,this.userInputNgModelCtrl=null,this.userInputElement=null,this.items=[],this.selectedChip=-1,this.deleteHint="Press delete to remove this chip.",this.deleteButtonLabel="Remove",this.chipBuffer="",this.useMdOnAppend=!1}function r(t,e,n,i){function r(r,s){function o(t){if(s.ngModel){var e=c[0].querySelector(t);return e&&e.outerHTML}}var c=s.$mdUserTemplate;s.$mdUserTemplate=null;var p=o("[md-chip-remove]")||h,a=o("md-chip-template")||d,m=o("md-autocomplete")||o("input")||l,u=c.find("md-chip");return function(r,o,c,d){e.initOptionalProperties(r,s),t(o);var h=d[0];if(h.chipContentsTemplate=a,h.chipRemoveTemplate=p,h.chipInputTemplate=m,o.attr({ariaHidden:!0,tabindex:-1}).on("focus",function(){h.onFocus()}),s.ngModel&&(h.configureNgModel(o.controller("ngModel")),c.mdOnAppend&&h.useMdOnAppendExpression(),m!=l&&i(function(){0===m.indexOf("<md-autocomplete")&&h.configureAutocomplete(o.find("md-autocomplete").controller("mdAutocomplete")),h.configureUserInput(o.find("input"))})),u.length>0){var C=n(u)(r.$parent);i(function(){o.find("md-chips-wrap").prepend(C)})}}}return{template:function(t,e){return e.$mdUserTemplate=t.clone(),p},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:!0,compile:r,scope:{readonly:"=readonly",placeholder:"@",secondaryPlaceholder:"@",mdOnAppend:"&",deleteHint:"@",deleteButtonLabel:"@",requireMatch:"=?mdRequireMatch"}}}function s(){this.selectedItem=null,this.searchText=""}function o(t,e){function n(n,i){return function(n,r,s,o){e.initOptionalProperties(n,i),t(r),r.attr("tabindex","-1")}}return{template:function(t,e){return a},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:!0,compile:n,scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",filterSelected:"=",contacts:"=ngModel",requireMatch:"=?mdRequireMatch"}}}angular.module("material.components.chips",["material.core","material.components.autocomplete"]),angular.module("material.components.chips").directive("mdChip",t);var c='\r\n    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">\r\n      {{$mdChipsCtrl.deleteHint}}\r\n    </span>';t.$inject=["$mdTheming"],angular.module("material.components.chips").directive("mdChipRemove",e),e.$inject=["$timeout"],angular.module("material.components.chips").directive("mdChipTransclude",n),n.$inject=["$compile","$mdUtil"],angular.module("material.components.chips").controller("MdChipsCtrl",i),i.$inject=["$scope","$mdConstant","$log","$element","$timeout"],i.prototype.inputKeydown=function(t){var e=this.getChipBuffer();switch(t.keyCode){case this.$mdConstant.KEY_CODE.ENTER:if(this.$scope.requireMatch||!e)break;t.preventDefault(),this.appendChip(e),this.resetChipBuffer();break;case this.$mdConstant.KEY_CODE.BACKSPACE:if(e)break;t.stopPropagation(),this.items.length&&this.selectAndFocusChipSafe(this.items.length-1)}},i.prototype.chipKeydown=function(t){if(!this.getChipBuffer())switch(t.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(this.selectedChip<0)return;t.preventDefault(),this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:t.preventDefault(),this.selectedChip<0&&(this.selectedChip=this.items.length),this.items.length&&this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:t.preventDefault(),this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(this.selectedChip<0)return;t.preventDefault(),this.onFocus()}},i.prototype.getPlaceholder=function(){var t=this.items.length&&(""==this.secondaryPlaceholder||this.secondaryPlaceholder);return t?this.placeholder:this.secondaryPlaceholder},i.prototype.removeAndSelectAdjacentChip=function(t){var e=this.getAdjacentChipIndex(t);this.removeChip(t),this.$timeout(function(){this.selectAndFocusChipSafe(e)}.bind(this))},i.prototype.resetSelectedChip=function(){this.selectedChip=-1},i.prototype.getAdjacentChipIndex=function(t){var e=this.items.length-1;return 0==e?-1:t==e?t-1:t},i.prototype.appendChip=function(t){this.items.indexOf(t)+1||(this.useMdOnAppend&&this.mdOnAppend&&(t=this.mdOnAppend({$chip:t})),this.items.push(t))},i.prototype.useMdOnAppendExpression=function(){this.useMdOnAppend=!0},i.prototype.getChipBuffer=function(){return this.userInputElement?this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value:this.chipBuffer},i.prototype.resetChipBuffer=function(){this.userInputElement?this.userInputNgModelCtrl?(this.userInputNgModelCtrl.$setViewValue(""),this.userInputNgModelCtrl.$render()):this.userInputElement[0].value="":this.chipBuffer=""},i.prototype.removeChip=function(t){this.items.splice(t,1)},i.prototype.removeChipAndFocusInput=function(t){this.removeChip(t),this.onFocus()},i.prototype.selectAndFocusChipSafe=function(t){return this.items.length?t===this.items.length?this.onFocus():(t=Math.max(t,0),t=Math.min(t,this.items.length-1),this.selectChip(t),void this.focusChip(t)):(this.selectChip(-1),void this.onFocus())},i.prototype.selectChip=function(t){t>=-1&&t<=this.items.length?this.selectedChip=t:this.$log.warn("Selected Chip index out of bounds; ignoring.")},i.prototype.selectAndFocusChip=function(t){this.selectChip(t),-1!=t&&this.focusChip(t)},i.prototype.focusChip=function(t){this.$element[0].querySelector('md-chip[index="'+t+'"] .md-chip-content').focus()},i.prototype.configureNgModel=function(t){this.ngModelCtrl=t;var e=this;t.$render=function(){e.items=e.ngModelCtrl.$viewValue}},i.prototype.onFocus=function(){var t=this.$element[0].querySelector("input");t&&t.focus(),this.resetSelectedChip()},i.prototype.onInputFocus=function(){this.inputHasFocus=!0,this.resetSelectedChip()},i.prototype.onInputBlur=function(){this.inputHasFocus=!1},i.prototype.configureUserInput=function(t){this.userInputElement=t;var e=t.controller("ngModel");e!=this.ngModelCtrl&&(this.userInputNgModelCtrl=e);var n=this.$scope,i=this;t.attr({tabindex:0}).on("keydown",function(t){n.$apply(function(){i.inputKeydown(t)})}).on("focus",i.onInputFocus.bind(i)).on("blur",i.onInputBlur.bind(i))},i.prototype.configureAutocomplete=function(t){t.registerSelectedItemWatcher(function(t){t&&(this.appendChip(t),this.resetChipBuffer())}.bind(this)),this.$element.find("input").on("focus",this.onInputFocus.bind(this)).on("blur",this.onInputBlur.bind(this))},i.prototype.hasFocus=function(){return this.inputHasFocus||this.selectedChip>=0},angular.module("material.components.chips").directive("mdChips",r);var p='\r\n    <md-chips-wrap\r\n        ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"\r\n        ng-keydown="$mdChipsCtrl.chipKeydown($event)"\r\n        ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"\r\n        class="md-chips">\r\n      <md-chip ng-repeat="$chip in $mdChipsCtrl.items"\r\n          index="{{$index}}"\r\n          ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">\r\n        <div class="md-chip-content"\r\n            tabindex="-1"\r\n            aria-hidden="true"\r\n            ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"\r\n            md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>\r\n        <div class="md-chip-remove-container"\r\n            md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>\r\n      </md-chip>\r\n      <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"\r\n          class="md-chip-input-container"\r\n          md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>\r\n      </div>\r\n    </md-chips-wrap>',l='\r\n      <input\r\n          tabindex="0"\r\n          placeholder="{{$mdChipsCtrl.getPlaceholder()}}"\r\n          aria-label="{{$mdChipsCtrl.getPlaceholder()}}"\r\n          ng-model="$mdChipsCtrl.chipBuffer"\r\n          ng-focus="$mdChipsCtrl.onInputFocus()"\r\n          ng-blur="$mdChipsCtrl.onInputBlur()"\r\n          ng-keydown="$mdChipsCtrl.inputKeydown($event)">',d="\r\n    <span>{{$chip}}</span>",h='\r\n    <button\r\n        class="md-chip-remove"\r\n        ng-if="!$mdChipsCtrl.readonly"\r\n        ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"\r\n        aria-hidden="true"\r\n        tabindex="-1">\r\n      <md-icon md-svg-icon="md-close"></md-icon>\r\n      <span class="md-visually-hidden">\r\n        {{$mdChipsCtrl.deleteButtonLabel}}\r\n      </span>\r\n    </button>';r.$inject=["$mdTheming","$mdUtil","$compile","$timeout"],angular.module("material.components.chips").controller("MdContactChipsCtrl",s),s.prototype.queryContact=function(t){var e=this.contactQuery({$query:t});return this.filterSelected?e.filter(this.filterSelectedContacts.bind(this)):e},s.prototype.filterSelectedContacts=function(t){return-1==this.contacts.indexOf(t)},angular.module("material.components.chips").directive("mdContactChips",o);var a='\r\n    <md-chips class="md-contact-chips"\r\n        ng-model="$mdContactChipsCtrl.contacts"\r\n        md-require-match="$mdContactChipsCtrl.requireMatch"\r\n        md-autocomplete-snap>\r\n        <md-autocomplete\r\n            md-menu-class="md-contact-chips-suggestions"\r\n            md-selected-item="$mdContactChipsCtrl.selectedItem"\r\n            md-search-text="$mdContactChipsCtrl.searchText"\r\n            md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"\r\n            md-item-text="$mdContactChipsCtrl.mdContactName"\r\n            md-no-cache="$mdContactChipsCtrl.filterSelected"\r\n            md-autoselect\r\n            placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?\r\n                $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">\r\n          <div class="md-contact-suggestion">\r\n            <img \r\n                ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"\r\n                alt="{{item[$mdContactChipsCtrl.contactName]}}" />\r\n            <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">\r\n              {{item[$mdContactChipsCtrl.contactName]}}\r\n            </span>\r\n            <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\r\n          </div>\r\n        </md-autocomplete>\r\n        <md-chip-template>\r\n          <div class="md-contact-avatar">\r\n            <img \r\n                ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"\r\n                alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />\r\n          </div>\r\n          <div class="md-contact-name">\r\n            {{$chip[$mdContactChipsCtrl.contactName]}}\r\n          </div>\r\n        </md-chip-template>\r\n    </md-chips>';o.$inject=["$mdTheming","$mdUtil"]}();